{"version":3,"sources":["Components/feedbackOptions/FeedbackOptions.js","Components/notification/Notification.js","Components/section/Section.js","Components/statistics/Statistics.js","Components/App.js","index.js","Components/feedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","addFeedback","options","map","option","className","s","optionBtn","type","name","onClick","Notification","message","Section","children","title","Statistics","good","neutral","bad","total","positivePercentage","initialState","App","useState","state","setState","countTotalFeedback","totalFeedback","Number","toFixed","countPositiveFeedbackPercentage","Object","keys","e","target","prev","ReactDOM","render","document","getElementById","module","exports"],"mappings":"4PAsBeA,EAlBS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACtC,OACE,mCACGA,EAAQC,KAAI,SAAAC,GAAM,OACjB,wBACEC,UAAWC,IAAEC,UACbC,KAAK,SACLC,KAAML,EACNM,QAAST,EAJX,SAOGG,GAFIA,SCNAO,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCQEC,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3B,OACE,qCACE,6BAAKA,IACJD,MCQQE,EAZI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCHAC,EAAe,CACnBL,KAAM,EACNC,QAAS,EACTC,IAAK,GAoDQI,EAjDH,WACV,MAA0BC,mBAASF,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAQMC,EAAqB,WAGzB,OAF+BF,EAAvBN,IAAuBM,EAAlBR,KAAkBQ,EAAZP,SAafU,EAAgBD,IAChBN,EATkC,WACtC,IAAQJ,EAASQ,EAATR,KAEFI,EAAqBJ,EAAe,IAAPA,EAAcU,IAAuB,EAExE,OAAOE,OAAOR,GAAoBS,UAITC,GACrB7B,EAAU8B,OAAOC,KAAKR,GAE5B,OACE,qCACE,cAAC,EAAD,CAASV,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBd,YA3BH,SAAAiC,GAClB,IAAQzB,EAASyB,EAAEC,OAAX1B,KAERiB,GAAS,SAAAU,GAAI,kCAAUA,GAAV,kBAAiB3B,EAAO2B,EAAK3B,GAAQ,QAwBHP,QAASA,MAEtD,cAAC,EAAD,CAASa,MAAM,aAAf,SACqB,IAAlBa,EACC,cAAC,EAAD,CACEX,KAAMQ,EAAMR,KACZC,QAASO,EAAMP,QACfC,IAAKM,EAAMN,IACXC,MAAOQ,EACPP,mBAAoBA,IAGtB,cAAC,EAAD,CAAcT,QAAQ,4B,MClDhCyB,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,UAAY,sC","file":"static/js/main.4d886b53.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ addFeedback, options }) => {\r\n  return (\r\n    <>\r\n      {options.map(option => (\r\n        <button\r\n          className={s.optionBtn}\r\n          type=\"button\"\r\n          name={option}\r\n          onClick={addFeedback}\r\n          key={option}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  addFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage} %</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n    .isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport FeedbackOptions from './feedbackOptions/FeedbackOptions';\r\nimport Notification from './notification/Notification';\r\n\r\nimport Section from './section/Section';\r\nimport Statistics from './statistics/Statistics';\r\n\r\nconst initialState = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n};\r\n\r\nconst App = () => {\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const addFeedback = e => {\r\n    const { name } = e.target;\r\n\r\n    setState(prev => ({ ...prev, [name]: prev[name] + 1 }));\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    const { bad, good, neutral } = state;\r\n    const total = bad + good + neutral;\r\n    return total;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    const { good } = state;\r\n\r\n    const positivePercentage = good ? (good * 100) / countTotalFeedback() : 0;\r\n\r\n    return Number(positivePercentage).toFixed();\r\n  };\r\n\r\n  const totalFeedback = countTotalFeedback();\r\n  const positivePercentage = countPositiveFeedbackPercentage();\r\n  const options = Object.keys(state);\r\n\r\n  return (\r\n    <>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions addFeedback={addFeedback} options={options} />\r\n      </Section>\r\n      <Section title=\"Statistics\">\r\n        {totalFeedback !== 0 ? (\r\n          <Statistics\r\n            good={state.good}\r\n            neutral={state.neutral}\r\n            bad={state.bad}\r\n            total={totalFeedback}\r\n            positivePercentage={positivePercentage}\r\n          />\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </Section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n// class App extends Component {\r\n//   state = {\r\n//     good: 0,\r\n//     neutral: 0,\r\n//     bad: 0,\r\n//   };\r\n\r\n//   addFeedback = e => {\r\n//     const { name } = e.target;\r\n\r\n//     setState(prev => ({ [name]: prev[name] + 1 }));\r\n//   };\r\n\r\n//   countTotalFeedback = () => {\r\n//     const { bad, good, neutral } = state;\r\n//     const total = bad + good + neutral;\r\n//     return total;\r\n//   };\r\n\r\n//   countPositiveFeedbackPercentage = () => {\r\n//     const { good } = state;\r\n\r\n//     const positivePercentage = good\r\n//       ? (good * 100) / countTotalFeedback()\r\n//       : 0;\r\n\r\n//     return Number(positivePercentage).toFixed();\r\n//   };\r\n\r\n//   render() {\r\n//     const totalFeedback = countTotalFeedback();\r\n//     const positivePercentage = countPositiveFeedbackPercentage();\r\n//     const options = Object.keys(state);\r\n//     // console.log(positivePercentage);\r\n\r\n//     return (\r\n//       <>\r\n//         <Section title=\"Please leave feedback\">\r\n//           <FeedbackOptions addFeedback={addFeedback} options={options} />\r\n//         </Section>\r\n//         <Section title=\"Statistics\">\r\n//           {totalFeedback !== 0 ? (\r\n//             <Statistics\r\n//               good={state.good}\r\n//               neutral={state.neutral}\r\n//               bad={state.bad}\r\n//               total={totalFeedback}\r\n//               positivePercentage={positivePercentage}\r\n//             />\r\n//           ) : (\r\n//             <Notification message=\"No feedback given\" />\r\n//           )}\r\n//         </Section>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"optionBtn\":\"FeedbackOptions_optionBtn__37HC8\"};"],"sourceRoot":""}